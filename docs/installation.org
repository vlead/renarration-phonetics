#+Title: SweetSai - a Sweet WebApp Development effort
#+Author: Sai Gollapudi
#+Email: saigollapudi1@gmail.com

* installation instructions for rnr_studio app
Here is how one can install and run the *rnr_studio* web application. The
instructions assume a ubutnu 14.04 operating environment. 
 1) goto a directory of your choice and clone the rnr_studio git
    repository. 
#+BEGIN_SRC sh :export code
git clone https://github.com/saigollapudi/rnr_studio.git
#+END_SRC

 2) cd to the new directory and install a Python Flask virtual
    environment. In my case, the directory is rnr_studio. The virtual
    environment is setup in a new directory called venv.

#+BEGIN_SRC sh :export code
cd rnr_studio
virtualenv venv
#+END_SRC

 3) Go into the virtual environment and install all the required
    Python packages (in the virtual environment, not globally for
    python). As the installation is not needed globally, we should
    refrain from forcing the installation with "sudo". Also, use
    Python package installer "pip" for this work. In a initial bare
    virtual environment, I only had these two packages:
    "argparse==1.2.1" and "wsgiref==0.1.2". Need to run Setup.py
    to get the first set of packages installed. README file from
    alipi repository or janastu org at github (found [[https://github.com/janastu/alip][here]]) also gives
    some basic information around this package installation
    requirements. Additional packages like Flask-Cors, requests should
    also be installed. 

#+BEGIN_SRC sh :export code
source venv/bin/activate
python setup.py develop
pip install Flask-cors
#+END_SRC

 4) In the cloned directoy or rnr_studio, there are sample config
    files. They are called sampleConf.py and sampleConfig.js. These
    files need to be updated into conf.py and config.js,
    respectively. Use your local configuration information.
 
 5) sometimes for testing, we can disable mongodb and then execute
    the code. This can be done by modifying the content of the
    alipi/alipi.py code. Here are the changes we did to suppress  the
    activation of mongodb. Not having mongodb would, of course,
    disable, publishing sweets. In this code the g.connection and
    g.db were commented out. In my case, I used a logging command
    (e.g. logging.debug) to ensure that the before-request and the
    teardown_request functions were not empty (which lead to an
    error). The logging.debug() was intended to only print useful
    debugging related messages to console.

#+BEGIN_SRC python :export code
@app.before_request
def first():
#	g.connection = pymongo.MongoClient('localhost', 27017)  
#	g.db = g.connection[conf.MONGODB[0]]

@app.teardown_request
def close(exception):
#	g.connection.disconnect()
#+END_SRC

 6) to execute the web application, just run alipi/alipi.py in
    python. To start the alipi renarration application, go to the
    ../rnr_studio/alipi/ directory and run index.html from
    there. The web app gets invoked from the index.html web page. The
    server it contacts is the server run by the alipi.py code.

#+BEGIN_SRC sh :export code
python alipi.py
#+END_SRC

* deployment instructions
Deployment information for Alipi is presented [[/home/welcome/workingFolder/Renarration/SemStySht/rnr_studio][here]]. We draw
inspiration from it as well. 
